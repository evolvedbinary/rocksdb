package org.rocksdb;

public class WriteBatchInternal {
    // Mirrors the ValueType in dbformat.h
    // Used to encode operations in the Java native batch which we build here
    enum ValueType {
      kTypeDeletion,
      kTypeValue,
      kTypeMerge,
      kTypeLogData, // WAL only.
      kTypeColumnFamilyDeletion, // WAL only.
      kTypeColumnFamilyValue, // WAL only.
      kTypeColumnFamilyMerge, // WAL only.
      kTypeSingleDeletion,
      kTypeColumnFamilySingleDeletion, // WAL only.
      kTypeBeginPrepareXID, // WAL only.
      kTypeEndPrepareXID, // WAL only.
      kTypeCommitXID, // WAL only.
      kTypeRollbackXID, // WAL only.
      kTypeNoop, // WAL only.
      kTypeColumnFamilyRangeDeletion, // WAL only.
      kTypeRangeDeletion, // meta block
      kTypeColumnFamilyBlobIndex, // Blob DB only
      kTypeBlobIndex, // Blob DB only
      // When the prepared record is also persisted in db, we use a different
      // record. This is to ensure that the WAL that is generated by a WritePolicy
      // is not mistakenly read by another, which would result into data
      // inconsistency.
      kTypeBeginPersistedPrepareXID, // WAL only.
      // Similar to kTypeBeginPersistedPrepareXID, this is to ensure that WAL
      // generated by WriteUnprepared write policy is not mistakenly read by
      // another.
      kTypeBeginUnprepareXID, // WAL only.
      kTypeDeletionWithTimestamp,
      kTypeCommitXIDAndTimestamp, // WAL only
      kTypeWideColumnEntity,
      kTypeColumnFamilyWideColumnEntity, // WAL only
      kTypeValuePreferredSeqno, // Value with a unix write time
      kTypeColumnFamilyValuePreferredSeqno, // WAL only
      kTypeMaxValid // Should be after the last valid type, only used for
    }

    static final int kSequenceOffset = 0;
    static final int kCountOffset = kSequenceOffset + Long.BYTES;

    static final int kHeaderEnd = kCountOffset + Integer.BYTES;
}
